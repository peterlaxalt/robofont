import unicodedata
from mm4.tools.moreUnicodeData import recursiveDecomposition

_orderedCategories = """Lu
Ll
Lt
Lm
Lo
Mn
Mc
Me
Nd
Nl
No
Pc
Pd
Ps
Pe
Pi
Pf
Po
Sm
Sc
Sk
So
Zs
Zl
Zp
Cc
Cf
Cs
Co
Cn""".splitlines()


def sortBySuffixAndUnicodeCategoryAndUnicodeValue(glyphs, font):
    """
    >>> font = _setupTestFont()
    >>> glyphs = sortBySuffixAndUnicodeCategoryAndUnicodeValue(font, font)
    >>> glyphList = [glyph.name for glyph in glyphs]
    >>> glyphList == _expectedTestResult
    True
    """
    categoryToSuffixToGlyphNames = {}
    glyphNameToGlyph = {}
    for glyph in glyphs:
        glyphName = glyph.name
        uniValue = glyph.unicode
        # glyph object
        glyphNameToGlyph[glyphName] = glyph
        # handle ligatures
        if uniValue is None and "_" in glyphName:
            first = glyphName.split("_")[0]
            uniValue = font.unicodeData.unicodeForGlyphName(first)
        # unicode value
        if uniValue is None:
            if "." in glyphName and not glyphName.startswith("."):
                base = glyphName.split(".")[0]
                uniValue = font.unicodeData.unicodeForGlyphName(base)
        if uniValue is not None and not isinstance(uniValue, int):
            uniValue = uniValue[0]
        # unicode category
        if uniValue is not None:
            category = unicodedata.category(chr(uniValue))
        else:
            category = None
        # suffix
        if "." not in glyphName or glyphName.startswith("."):
            suffix = None
        else:
            suffix = glyphName.split(".")[1]
        # store the data
        if category not in categoryToSuffixToGlyphNames:
            categoryToSuffixToGlyphNames[category] = {}
        if suffix not in categoryToSuffixToGlyphNames[category]:
            categoryToSuffixToGlyphNames[category][suffix] = []
        categoryToSuffixToGlyphNames[category][suffix].append((uniValue, glyphName))
    # order the categories
    sortedCategories = []
    for category in categoryToSuffixToGlyphNames.keys():
        if category not in _orderedCategories:
            rank = 999999
        else:
            rank = _orderedCategories.index(category)
        sortedCategories.append((rank, category))
    sortedCategories = [category for rank, category in sorted(sortedCategories)]
    # subsort the glyphs within each suffix
    for category, suffixToGlyphNames in categoryToSuffixToGlyphNames.items():
        for suffix, glyphList in suffixToGlyphNames.items():
            withUniValue = []
            withoutUniValue = []
            withBase = {}
            for uniValue, glyphName in glyphList:
                if uniValue is not None:
                    withUniValue.append((uniValue, glyphName))
                    # catch all glyphs that can be decomposed
                    decomposition = recursiveDecomposition(uniValue)
                    if decomposition != -1 and decomposition in font.unicodeData:
                        base = font.unicodeData[decomposition][0]
                        if "." in glyphName:
                            suffix = glyphName.split(".", 1)[1]
                            baseWithSuffix = base + "." + suffix
                            if baseWithSuffix in font:
                                base = baseWithSuffix
                        if base not in withBase:
                            withBase[base] = set()
                        withBase[base].add((uniValue, glyphName))
                else:
                    withoutUniValue.append(glyphName)
            withUniValue.sort()
            withoutUniValue.sort()
            withUniValue = [glyphName for uniValue, glyphName in withUniValue]
            # group the decomposable glyphs with their bases
            for base, glyphList in withBase.items():
                if base not in withUniValue:
                    continue
                sortedGlyphList = []
                for uniValue, glyphName in sorted(glyphList):
                    withUniValue.remove(glyphName)
                    sortedGlyphList.append(glyphName)
                index = withUniValue.index(base) + 1
                for glyphName in reversed(sortedGlyphList):
                    withUniValue.insert(index, glyphName)
            sortedGlyphNames = withUniValue + withoutUniValue
            categoryToSuffixToGlyphNames[category][suffix] = sortedGlyphNames

    # create the final order
    sortedGlyphNames = []
    knownLigatures = set("fi fl ff ffi ffl".split(" "))
    for category in sortedCategories:
        suffixToGlyphNames = categoryToSuffixToGlyphNames[category]
        for suffix, glyphList in sorted(suffixToGlyphNames.items()):
            holdingLigatures = []
            for glyphName in glyphList:
                if glyphName.split(".")[0] in knownLigatures or "_" in glyphName:
                    holdingLigatures.append(glyphName)
                else:
                    sortedGlyphNames.append(glyphName)
            sortedGlyphNames += holdingLigatures
    # turn it back into glyphs
    glyphs = [glyphNameToGlyph[glyphName] for glyphName in sortedGlyphNames]
    # finished
    return glyphs


def _setupTestFont():
    from fontTools.agl import AGL2UV
    from defcon import Font
    font = Font()
    # basic glyphs
    for glyphName, uniValue in AGL2UV.items():
        font.newGlyph(glyphName)
        glyph = font[glyphName]
        glyph.unicode = uniValue
    # figure glyphs
    figureSuffixes = "lining tabular numerator denomentator oldstyle superior inferior".split(" ")
    for suffix in figureSuffixes:
        for glyphName in "zero one two three four five six seven eight nine".split(" "):
            font.newGlyph(glyphName + "." + suffix)
            font.newGlyph(glyphName + "." + suffix + "1")
            font.newGlyph(glyphName + "." + suffix + "2")
        if suffix in "superior inferior":
            for glyphName in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
                font.newGlyph(glyphName + "." + suffix)
                font.newGlyph(glyphName + "." + suffix + "1")
                font.newGlyph(glyphName + "." + suffix + "2")
    # alternates
    alternateSuffixes = "alt swash".split(" ")
    for glyphName in "ABCDEFGHIJKLMNOPQRSTUVWXYZ":
        for suffix in alternateSuffixes:
            font.newGlyph(glyphName + "." + suffix)
            font.newGlyph(glyphName + "." + suffix + "1")
            font.newGlyph(glyphName + "." + suffix + "2")
    # ligatures
    ligatures = "fi fl ff ffi ffl A_B a_b one_two period_four".split(" ")
    ligaturesSuffixes = ["alt"]
    for glyphName in ligatures:
        font.newGlyph(glyphName)
        for suffix in ligaturesSuffixes:
            font.newGlyph(glyphName + "." + suffix + "1")
            font.newGlyph(glyphName + "." + suffix + "2")
    # finished
    return font


_expectedTestResult = ['A',
'Agrave',
'Aacute',
'Acircumflex',
'Atilde',
'Adieresis',
'Aring',
'Amacron',
'Abreve',
'Aogonek',
'Aringacute',
'B',
'C',
'Ccedilla',
'Cacute',
'Ccircumflex',
'Cdotaccent',
'Ccaron',
'D',
'Dcaron',
'E',
'Egrave',
'Eacute',
'Ecircumflex',
'Edieresis',
'Emacron',
'Ebreve',
'Edotaccent',
'Eogonek',
'Ecaron',
'F',
'G',
'Gcircumflex',
'Gbreve',
'Gdotaccent',
'Gcaron',
'H',
'Hcircumflex',
'I',
'Igrave',
'Iacute',
'Icircumflex',
'Idieresis',
'Itilde',
'Imacron',
'Ibreve',
'Iogonek',
'Idotaccent',
'J',
'Jcircumflex',
'K',
'L',
'Lacute',
'Lcaron',
'M',
'N',
'Ntilde',
'Nacute',
'Ncaron',
'O',
'Ograve',
'Oacute',
'Ocircumflex',
'Otilde',
'Odieresis',
'Omacron',
'Obreve',
'Ohungarumlaut',
'Ohorn',
'P',
'Q',
'R',
'Racute',
'Rcaron',
'S',
'Sacute',
'Scircumflex',
'Scedilla',
'Scaron',
'T',
'Tcaron',
'U',
'Ugrave',
'Uacute',
'Ucircumflex',
'Udieresis',
'Utilde',
'Umacron',
'Ubreve',
'Uring',
'Uhungarumlaut',
'Uogonek',
'Uhorn',
'V',
'W',
'Wcircumflex',
'Wgrave',
'Wacute',
'Wdieresis',
'X',
'Y',
'Yacute',
'Ycircumflex',
'Ydieresis',
'Ygrave',
'Z',
'Zacute',
'Zdotaccent',
'Zcaron',
'AE',
'AEacute',
'Eth',
'Oslash',
'Oslashacute',
'Thorn',
'Dcroat',
'Hbar',
'IJ',
'Ldot',
'Lslash',
'Eng',
'OE',
'Tbar',
'Omegatonos',
'Alpha',
'Alphatonos',
'Beta',
'Gamma',
'Epsilon',
'Epsilontonos',
'Zeta',
'Eta',
'Etatonos',
'Theta',
'Iota',
'Iotatonos',
'Iotadieresis',
'Kappa',
'Lambda',
'Mu',
'Nu',
'Xi',
'Omicron',
'Omicrontonos',
'Pi',
'Rho',
'Sigma',
'Tau',
'Upsilon',
'Upsilontonos',
'Upsilondieresis',
'Phi',
'Chi',
'Psi',
'Upsilon1',
'Ifraktur',
'Rfraktur',
'Omega',
'A_B',
'A.alt',
'B.alt',
'C.alt',
'D.alt',
'E.alt',
'F.alt',
'G.alt',
'H.alt',
'I.alt',
'J.alt',
'K.alt',
'L.alt',
'M.alt',
'N.alt',
'O.alt',
'P.alt',
'Q.alt',
'R.alt',
'S.alt',
'T.alt',
'U.alt',
'V.alt',
'W.alt',
'X.alt',
'Y.alt',
'Z.alt',
'A.alt1',
'B.alt1',
'C.alt1',
'D.alt1',
'E.alt1',
'F.alt1',
'G.alt1',
'H.alt1',
'I.alt1',
'J.alt1',
'K.alt1',
'L.alt1',
'M.alt1',
'N.alt1',
'O.alt1',
'P.alt1',
'Q.alt1',
'R.alt1',
'S.alt1',
'T.alt1',
'U.alt1',
'V.alt1',
'W.alt1',
'X.alt1',
'Y.alt1',
'Z.alt1',
'A_B.alt1',
'A.alt2',
'B.alt2',
'C.alt2',
'D.alt2',
'E.alt2',
'F.alt2',
'G.alt2',
'H.alt2',
'I.alt2',
'J.alt2',
'K.alt2',
'L.alt2',
'M.alt2',
'N.alt2',
'O.alt2',
'P.alt2',
'Q.alt2',
'R.alt2',
'S.alt2',
'T.alt2',
'U.alt2',
'V.alt2',
'W.alt2',
'X.alt2',
'Y.alt2',
'Z.alt2',
'A_B.alt2',
'A.inferior',
'B.inferior',
'C.inferior',
'D.inferior',
'E.inferior',
'F.inferior',
'G.inferior',
'H.inferior',
'I.inferior',
'J.inferior',
'K.inferior',
'L.inferior',
'M.inferior',
'N.inferior',
'O.inferior',
'P.inferior',
'Q.inferior',
'R.inferior',
'S.inferior',
'T.inferior',
'U.inferior',
'V.inferior',
'W.inferior',
'X.inferior',
'Y.inferior',
'Z.inferior',
'A.inferior1',
'B.inferior1',
'C.inferior1',
'D.inferior1',
'E.inferior1',
'F.inferior1',
'G.inferior1',
'H.inferior1',
'I.inferior1',
'J.inferior1',
'K.inferior1',
'L.inferior1',
'M.inferior1',
'N.inferior1',
'O.inferior1',
'P.inferior1',
'Q.inferior1',
'R.inferior1',
'S.inferior1',
'T.inferior1',
'U.inferior1',
'V.inferior1',
'W.inferior1',
'X.inferior1',
'Y.inferior1',
'Z.inferior1',
'A.inferior2',
'B.inferior2',
'C.inferior2',
'D.inferior2',
'E.inferior2',
'F.inferior2',
'G.inferior2',
'H.inferior2',
'I.inferior2',
'J.inferior2',
'K.inferior2',
'L.inferior2',
'M.inferior2',
'N.inferior2',
'O.inferior2',
'P.inferior2',
'Q.inferior2',
'R.inferior2',
'S.inferior2',
'T.inferior2',
'U.inferior2',
'V.inferior2',
'W.inferior2',
'X.inferior2',
'Y.inferior2',
'Z.inferior2',
'A.superior',
'B.superior',
'C.superior',
'D.superior',
'E.superior',
'F.superior',
'G.superior',
'H.superior',
'I.superior',
'J.superior',
'K.superior',
'L.superior',
'M.superior',
'N.superior',
'O.superior',
'P.superior',
'Q.superior',
'R.superior',
'S.superior',
'T.superior',
'U.superior',
'V.superior',
'W.superior',
'X.superior',
'Y.superior',
'Z.superior',
'A.superior1',
'B.superior1',
'C.superior1',
'D.superior1',
'E.superior1',
'F.superior1',
'G.superior1',
'H.superior1',
'I.superior1',
'J.superior1',
'K.superior1',
'L.superior1',
'M.superior1',
'N.superior1',
'O.superior1',
'P.superior1',
'Q.superior1',
'R.superior1',
'S.superior1',
'T.superior1',
'U.superior1',
'V.superior1',
'W.superior1',
'X.superior1',
'Y.superior1',
'Z.superior1',
'A.superior2',
'B.superior2',
'C.superior2',
'D.superior2',
'E.superior2',
'F.superior2',
'G.superior2',
'H.superior2',
'I.superior2',
'J.superior2',
'K.superior2',
'L.superior2',
'M.superior2',
'N.superior2',
'O.superior2',
'P.superior2',
'Q.superior2',
'R.superior2',
'S.superior2',
'T.superior2',
'U.superior2',
'V.superior2',
'W.superior2',
'X.superior2',
'Y.superior2',
'Z.superior2',
'A.swash',
'B.swash',
'C.swash',
'D.swash',
'E.swash',
'F.swash',
'G.swash',
'H.swash',
'I.swash',
'J.swash',
'K.swash',
'L.swash',
'M.swash',
'N.swash',
'O.swash',
'P.swash',
'Q.swash',
'R.swash',
'S.swash',
'T.swash',
'U.swash',
'V.swash',
'W.swash',
'X.swash',
'Y.swash',
'Z.swash',
'A.swash1',
'B.swash1',
'C.swash1',
'D.swash1',
'E.swash1',
'F.swash1',
'G.swash1',
'H.swash1',
'I.swash1',
'J.swash1',
'K.swash1',
'L.swash1',
'M.swash1',
'N.swash1',
'O.swash1',
'P.swash1',
'Q.swash1',
'R.swash1',
'S.swash1',
'T.swash1',
'U.swash1',
'V.swash1',
'W.swash1',
'X.swash1',
'Y.swash1',
'Z.swash1',
'A.swash2',
'B.swash2',
'C.swash2',
'D.swash2',
'E.swash2',
'F.swash2',
'G.swash2',
'H.swash2',
'I.swash2',
'J.swash2',
'K.swash2',
'L.swash2',
'M.swash2',
'N.swash2',
'O.swash2',
'P.swash2',
'Q.swash2',
'R.swash2',
'S.swash2',
'T.swash2',
'U.swash2',
'V.swash2',
'W.swash2',
'X.swash2',
'Y.swash2',
'Z.swash2',
'a',
'agrave',
'aacute',
'acircumflex',
'atilde',
'adieresis',
'aring',
'amacron',
'abreve',
'aogonek',
'aringacute',
'b',
'c',
'ccedilla',
'cacute',
'ccircumflex',
'cdotaccent',
'ccaron',
'd',
'dcaron',
'e',
'egrave',
'eacute',
'ecircumflex',
'edieresis',
'emacron',
'ebreve',
'edotaccent',
'eogonek',
'ecaron',
'f',
'g',
'gcircumflex',
'gbreve',
'gdotaccent',
'gcaron',
'h',
'hcircumflex',
'i',
'igrave',
'iacute',
'icircumflex',
'idieresis',
'itilde',
'imacron',
'ibreve',
'iogonek',
'j',
'jcircumflex',
'k',
'l',
'lacute',
'lcaron',
'm',
'n',
'ntilde',
'nacute',
'ncaron',
'o',
'ograve',
'oacute',
'ocircumflex',
'otilde',
'odieresis',
'omacron',
'obreve',
'ohungarumlaut',
'ohorn',
'p',
'q',
'r',
'racute',
'rcaron',
's',
'sacute',
'scircumflex',
'scedilla',
'scaron',
't',
'tcaron',
'u',
'ugrave',
'uacute',
'ucircumflex',
'udieresis',
'utilde',
'umacron',
'ubreve',
'uring',
'uhungarumlaut',
'uogonek',
'uhorn',
'v',
'w',
'wcircumflex',
'wgrave',
'wacute',
'wdieresis',
'x',
'y',
'yacute',
'ydieresis',
'ycircumflex',
'ygrave',
'z',
'zacute',
'zdotaccent',
'zcaron',
'ordfeminine',
'mu',
'ordmasculine',
'germandbls',
'ae',
'aeacute',
'eth',
'oslash',
'oslashacute',
'thorn',
'dcroat',
'hbar',
'dotlessi',
'ij',
'kgreenlandic',
'ldot',
'lslash',
'napostrophe',
'eng',
'oe',
'tbar',
'longs',
'florin',
'alpha',
'alphatonos',
'beta',
'gamma',
'delta',
'epsilon',
'epsilontonos',
'zeta',
'eta',
'etatonos',
'theta',
'iota',
'iotadieresistonos',
'iotatonos',
'iotadieresis',
'kappa',
'lambda',
'nu',
'xi',
'omicron',
'omicrontonos',
'pi',
'rho',
'sigma1',
'sigma',
'tau',
'upsilon',
'upsilondieresistonos',
'upsilondieresis',
'upsilontonos',
'phi',
'chi',
'psi',
'omega',
'omegatonos',
'theta1',
'phi1',
'omega1',
'a_b',
'a_b.alt1',
'a_b.alt2',
'circumflex',
'caron',
'aleph',
'gravecomb',
'acutecomb',
'tildecomb',
'hookabovecomb',
'dotbelowcomb',
'zero',
'one',
'two',
'three',
'four',
'five',
'six',
'seven',
'eight',
'nine',
'one_two',
'one_two.alt1',
'one_two.alt2',
'zero.denomentator',
'one.denomentator',
'two.denomentator',
'three.denomentator',
'four.denomentator',
'five.denomentator',
'six.denomentator',
'seven.denomentator',
'eight.denomentator',
'nine.denomentator',
'zero.denomentator1',
'one.denomentator1',
'two.denomentator1',
'three.denomentator1',
'four.denomentator1',
'five.denomentator1',
'six.denomentator1',
'seven.denomentator1',
'eight.denomentator1',
'nine.denomentator1',
'zero.denomentator2',
'one.denomentator2',
'two.denomentator2',
'three.denomentator2',
'four.denomentator2',
'five.denomentator2',
'six.denomentator2',
'seven.denomentator2',
'eight.denomentator2',
'nine.denomentator2',
'zero.inferior',
'one.inferior',
'two.inferior',
'three.inferior',
'four.inferior',
'five.inferior',
'six.inferior',
'seven.inferior',
'eight.inferior',
'nine.inferior',
'zero.inferior1',
'one.inferior1',
'two.inferior1',
'three.inferior1',
'four.inferior1',
'five.inferior1',
'six.inferior1',
'seven.inferior1',
'eight.inferior1',
'nine.inferior1',
'zero.inferior2',
'one.inferior2',
'two.inferior2',
'three.inferior2',
'four.inferior2',
'five.inferior2',
'six.inferior2',
'seven.inferior2',
'eight.inferior2',
'nine.inferior2',
'zero.lining',
'one.lining',
'two.lining',
'three.lining',
'four.lining',
'five.lining',
'six.lining',
'seven.lining',
'eight.lining',
'nine.lining',
'zero.lining1',
'one.lining1',
'two.lining1',
'three.lining1',
'four.lining1',
'five.lining1',
'six.lining1',
'seven.lining1',
'eight.lining1',
'nine.lining1',
'zero.lining2',
'one.lining2',
'two.lining2',
'three.lining2',
'four.lining2',
'five.lining2',
'six.lining2',
'seven.lining2',
'eight.lining2',
'nine.lining2',
'zero.numerator',
'one.numerator',
'two.numerator',
'three.numerator',
'four.numerator',
'five.numerator',
'six.numerator',
'seven.numerator',
'eight.numerator',
'nine.numerator',
'zero.numerator1',
'one.numerator1',
'two.numerator1',
'three.numerator1',
'four.numerator1',
'five.numerator1',
'six.numerator1',
'seven.numerator1',
'eight.numerator1',
'nine.numerator1',
'zero.numerator2',
'one.numerator2',
'two.numerator2',
'three.numerator2',
'four.numerator2',
'five.numerator2',
'six.numerator2',
'seven.numerator2',
'eight.numerator2',
'nine.numerator2',
'zero.oldstyle',
'one.oldstyle',
'two.oldstyle',
'three.oldstyle',
'four.oldstyle',
'five.oldstyle',
'six.oldstyle',
'seven.oldstyle',
'eight.oldstyle',
'nine.oldstyle',
'zero.oldstyle1',
'one.oldstyle1',
'two.oldstyle1',
'three.oldstyle1',
'four.oldstyle1',
'five.oldstyle1',
'six.oldstyle1',
'seven.oldstyle1',
'eight.oldstyle1',
'nine.oldstyle1',
'zero.oldstyle2',
'one.oldstyle2',
'two.oldstyle2',
'three.oldstyle2',
'four.oldstyle2',
'five.oldstyle2',
'six.oldstyle2',
'seven.oldstyle2',
'eight.oldstyle2',
'nine.oldstyle2',
'zero.superior',
'one.superior',
'two.superior',
'three.superior',
'four.superior',
'five.superior',
'six.superior',
'seven.superior',
'eight.superior',
'nine.superior',
'zero.superior1',
'one.superior1',
'two.superior1',
'three.superior1',
'four.superior1',
'five.superior1',
'six.superior1',
'seven.superior1',
'eight.superior1',
'nine.superior1',
'zero.superior2',
'one.superior2',
'two.superior2',
'three.superior2',
'four.superior2',
'five.superior2',
'six.superior2',
'seven.superior2',
'eight.superior2',
'nine.superior2',
'zero.tabular',
'one.tabular',
'two.tabular',
'three.tabular',
'four.tabular',
'five.tabular',
'six.tabular',
'seven.tabular',
'eight.tabular',
'nine.tabular',
'zero.tabular1',
'one.tabular1',
'two.tabular1',
'three.tabular1',
'four.tabular1',
'five.tabular1',
'six.tabular1',
'seven.tabular1',
'eight.tabular1',
'nine.tabular1',
'zero.tabular2',
'one.tabular2',
'two.tabular2',
'three.tabular2',
'four.tabular2',
'five.tabular2',
'six.tabular2',
'seven.tabular2',
'eight.tabular2',
'nine.tabular2',
'onequarter',
'onehalf',
'threequarters',
'onethird',
'twothirds',
'oneeighth',
'threeeighths',
'fiveeighths',
'seveneighths',
'underscore',
'hyphen',
'figuredash',
'endash',
'emdash',
'parenleft',
'bracketleft',
'braceleft',
'quotesinglbase',
'quotedblbase',
'angleleft',
'parenright',
'bracketright',
'braceright',
'angleright',
'guillemotleft',
'quoteleft',
'quotereversed',
'quotedblleft',
'guilsinglleft',
'guillemotright',
'quoteright',
'quotedblright',
'guilsinglright',
'exclam',
'quotedbl',
'numbersign',
'percent',
'ampersand',
'quotesingle',
'asterisk',
'comma',
'period',
'slash',
'colon',
'semicolon',
'question',
'at',
'backslash',
'exclamdown',
'periodcentered',
'questiondown',
'anoteleia',
'underscoredbl',
'dagger',
'daggerdbl',
'bullet',
'onedotenleader',
'twodotenleader',
'ellipsis',
'perthousand',
'minute',
'second',
'exclamdbl',
'period_four',
'period_four.alt1',
'period_four.alt2',
'plus',
'less',
'equal',
'greater',
'bar',
'asciitilde',
'logicalnot',
'plusminus',
'multiply',
'divide',
'fraction',
'arrowleft',
'arrowup',
'arrowright',
'arrowdown',
'arrowboth',
'arrowdblright',
'arrowdblboth',
'universal',
'partialdiff',
'existential',
'emptyset',
'Delta',
'gradient',
'element',
'notelement',
'suchthat',
'product',
'summation',
'minus',
'asteriskmath',
'radical',
'proportional',
'infinity',
'orthogonal',
'angle',
'logicaland',
'logicalor',
'intersection',
'union',
'integral',
'therefore',
'similar',
'congruent',
'approxequal',
'notequal',
'equivalence',
'lessequal',
'greaterequal',
'propersubset',
'propersuperset',
'notsubset',
'reflexsubset',
'reflexsuperset',
'circleplus',
'circlemultiply',
'perpendicular',
'dotmath',
'integraltp',
'integralbt',
'dollar',
'cent',
'sterling',
'currency',
'yen',
'colonmonetary',
'franc',
'lira',
'peseta',
'dong',
'Euro',
'asciicircum',
'grave',
'dieresis',
'macron',
'acute',
'cedilla',
'breve',
'dotaccent',
'ring',
'ogonek',
'tilde',
'hungarumlaut',
'tonos',
'dieresistonos',
'brokenbar',
'section',
'copyright',
'registered',
'degree',
'paragraph',
'weierstrass',
'prescription',
'trademark',
'estimated',
'arrowupdn',
'arrowupdnbse',
'carriagereturn',
'arrowdblleft',
'arrowdblup',
'arrowdbldown',
'house',
'revlogicalnot',
'SF100000',
'SF110000',
'SF010000',
'SF030000',
'SF020000',
'SF040000',
'SF080000',
'SF090000',
'SF060000',
'SF070000',
'SF050000',
'SF430000',
'SF240000',
'SF510000',
'SF520000',
'SF390000',
'SF220000',
'SF210000',
'SF250000',
'SF500000',
'SF490000',
'SF380000',
'SF280000',
'SF270000',
'SF260000',
'SF360000',
'SF370000',
'SF420000',
'SF190000',
'SF200000',
'SF230000',
'SF470000',
'SF480000',
'SF410000',
'SF450000',
'SF460000',
'SF400000',
'SF540000',
'SF530000',
'SF440000',
'upblock',
'dnblock',
'block',
'lfblock',
'rtblock',
'ltshade',
'shade',
'dkshade',
'filledbox',
'H22073',
'H18543',
'H18551',
'filledrect',
'triagup',
'triagrt',
'triagdn',
'triaglf',
'lozenge',
'circle',
'H18533',
'invbullet',
'invcircle',
'openbullet',
'smileface',
'invsmileface',
'sun',
'female',
'male',
'spade',
'club',
'heart',
'diamond',
'musicalnote',
'musicalnotedbl',
'space',
'ff',
'ffi',
'ffl',
'fi',
'fl',
'ff.alt1',
'ffi.alt1',
'ffl.alt1',
'fi.alt1',
'fl.alt1',
'ff.alt2',
'ffi.alt2',
'ffl.alt2',
'fi.alt2',
'fl.alt2']


if __name__ == "__main__":
    import doctest
    doctest.testmod()
